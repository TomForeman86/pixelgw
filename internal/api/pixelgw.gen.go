//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.1-0.20240607100731-2f92e0e4b159 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	schema "tidbyt.dev/pixlet/schema"
)

// App defines model for App.
type App struct {
	// Author Author of the app
	Author      string `json:"author"`
	Description string `json:"description"`

	// Id Unique ID of the app
	Id string `json:"id"`

	// Name Name of the app
	Name   string  `json:"name"`
	Schema *Schema `json:"schema,omitempty"`

	// Summary Short summary of the app
	Summary string `json:"summary"`
}

// AppInstanceDetail defines model for AppInstanceDetail.
type AppInstanceDetail struct {
	// AppID Applet ID
	AppID string `json:"app-id"`

	// Config Applet configuration
	Config json.RawMessage `json:"config,omitempty"`

	// Idx App position
	Idx *int `json:"idx,omitempty"`

	// UUID App instance UUID
	UUID *openapi_types.UUID `json:"uuid,omitempty"`
}

// AppInstanceSummary defines model for AppInstanceSummary.
type AppInstanceSummary struct {
	// AppID Applet ID
	AppID string `json:"app-id"`

	// Config Applet configuration
	Config json.RawMessage `json:"config,omitempty"`

	// Idx App position
	Idx *int `json:"idx,omitempty"`
}

// ChannelDetail defines model for ChannelDetail.
type ChannelDetail struct {
	Applets *[]AppInstanceDetail `json:"applets,omitempty"`

	// Comment Comment for the channel
	Comment *string `json:"comment,omitempty"`

	// Name Name of the channel
	Name        string       `json:"name"`
	Subscribers *[]DeviceRef `json:"subscribers,omitempty"`

	// UUID UUID of the channel
	UUID *openapi_types.UUID `json:"uuid,omitempty"`
}

// ChannelRef defines model for ChannelRef.
type ChannelRef struct {
	// Name Name of the channel
	Name *string `json:"name,omitempty"`

	// UUID UUID of the channel
	UUID *openapi_types.UUID `json:"uuid,omitempty"`
}

// ChannelSummary defines model for ChannelSummary.
type ChannelSummary struct {
	// Comment Comment for the channel
	Comment *string `json:"comment,omitempty"`

	// Name Name of the channel
	Name string `json:"name"`

	// UUID UUID of the channel
	UUID *openapi_types.UUID `json:"uuid,omitempty"`
}

// DeviceRef defines model for DeviceRef.
type DeviceRef struct {
	// Name Name of the channel
	Name *string `json:"name,omitempty"`

	// UUID UUID of the device
	UUID *openapi_types.UUID `json:"uuid,omitempty"`
}

// DeviceSummary defines model for DeviceSummary.
type DeviceSummary struct {
	Channel *ChannelRef `json:"channel,omitempty"`

	// Name Name of the channel
	Name *string `json:"name,omitempty"`

	// UUID UUID of the device
	UUID *openapi_types.UUID `json:"uuid,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Notification defines model for Notification.
type Notification = SchemaField

// Schema defines model for Schema.
type Schema = schema.Schema

// SchemaField defines model for SchemaField.
type SchemaField = schema.SchemaField

// SchemaOption defines model for SchemaOption.
type SchemaOption = schema.SchemaOption

// SchemaVisibility defines model for SchemaVisibility.
type SchemaVisibility = schema.SchemaVisibility

// SessionSummary defines model for SessionSummary.
type SessionSummary struct {
	Channel *ChannelRef `json:"channel,omitempty"`
	Device  *DeviceRef  `json:"device,omitempty"`

	// ID Session ID
	ID *uint32 `json:"id,omitempty"`

	// RemoteAddr Remote IP address
	RemoteAddr *string `json:"remote-addr,omitempty"`
}

// DefaultErrorResponse defines model for DefaultErrorResponse.
type DefaultErrorResponse = Error

// GetAppletsParams defines parameters for GetApplets.
type GetAppletsParams struct {
	// Id Id to filter by
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// PatchChannelAppletJSONBody defines parameters for PatchChannelApplet.
type PatchChannelAppletJSONBody struct {
	// Config Applet configuration
	Config json.RawMessage `json:"config,omitempty"`

	// Idx App position
	Idx *int `json:"idx,omitempty"`
}

// PatchDeviceJSONBody defines parameters for PatchDevice.
type PatchDeviceJSONBody struct {
	Channel *ChannelRef `json:"channel,omitempty"`

	// Name Device name
	Name *string `json:"name,omitempty"`
}

// CreateChannelJSONRequestBody defines body for CreateChannel for application/json ContentType.
type CreateChannelJSONRequestBody = ChannelSummary

// CreateChannelAppletJSONRequestBody defines body for CreateChannelApplet for application/json ContentType.
type CreateChannelAppletJSONRequestBody = AppInstanceSummary

// PatchChannelAppletJSONRequestBody defines body for PatchChannelApplet for application/json ContentType.
type PatchChannelAppletJSONRequestBody PatchChannelAppletJSONBody

// PatchDeviceJSONRequestBody defines body for PatchDevice for application/json ContentType.
type PatchDeviceJSONRequestBody PatchDeviceJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List available apps
	// (GET /applets)
	GetApplets(w http.ResponseWriter, r *http.Request, params GetAppletsParams)
	// Get the details of an app
	// (GET /applets/{id})
	GetAppletByID(w http.ResponseWriter, r *http.Request, id string)

	// (GET /channels)
	GetChannels(w http.ResponseWriter, r *http.Request)

	// (POST /channels)
	CreateChannel(w http.ResponseWriter, r *http.Request)

	// (POST /channels/{channelUUID}/applets)
	CreateChannelApplet(w http.ResponseWriter, r *http.Request, channelUUID openapi_types.UUID)

	// (DELETE /channels/{channelUUID}/applets/{appletUUID})
	DeleteChannelApplet(w http.ResponseWriter, r *http.Request, channelUUID openapi_types.UUID, appletUUID openapi_types.UUID)

	// (PATCH /channels/{channelUUID}/applets/{appletUUID})
	PatchChannelApplet(w http.ResponseWriter, r *http.Request, channelUUID openapi_types.UUID, appletUUID openapi_types.UUID)

	// (GET /channels/{uuid})
	FindChannelByUUID(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID)
	// Get configured devices
	// (GET /devices)
	GetDevices(w http.ResponseWriter, r *http.Request)

	// (GET /devices/{uuid})
	GetDeviceByUUID(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID)

	// (PATCH /devices/{uuid})
	PatchDevice(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID)
	// Get connected sessions
	// (GET /sessions)
	GetSessions(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApplets operation middleware
func (siw *ServerInterfaceWrapper) GetApplets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAppletsParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApplets(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAppletByID operation middleware
func (siw *ServerInterfaceWrapper) GetAppletByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAppletByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetChannels operation middleware
func (siw *ServerInterfaceWrapper) GetChannels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetChannels(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChannel operation middleware
func (siw *ServerInterfaceWrapper) CreateChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChannel(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateChannelApplet operation middleware
func (siw *ServerInterfaceWrapper) CreateChannelApplet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channelUUID" -------------
	var channelUUID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "channelUUID", r.PathValue("channelUUID"), &channelUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelUUID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateChannelApplet(w, r, channelUUID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteChannelApplet operation middleware
func (siw *ServerInterfaceWrapper) DeleteChannelApplet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channelUUID" -------------
	var channelUUID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "channelUUID", r.PathValue("channelUUID"), &channelUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelUUID", Err: err})
		return
	}

	// ------------- Path parameter "appletUUID" -------------
	var appletUUID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "appletUUID", r.PathValue("appletUUID"), &appletUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appletUUID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteChannelApplet(w, r, channelUUID, appletUUID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchChannelApplet operation middleware
func (siw *ServerInterfaceWrapper) PatchChannelApplet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channelUUID" -------------
	var channelUUID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "channelUUID", r.PathValue("channelUUID"), &channelUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channelUUID", Err: err})
		return
	}

	// ------------- Path parameter "appletUUID" -------------
	var appletUUID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "appletUUID", r.PathValue("appletUUID"), &appletUUID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "appletUUID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchChannelApplet(w, r, channelUUID, appletUUID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindChannelByUUID operation middleware
func (siw *ServerInterfaceWrapper) FindChannelByUUID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", r.PathValue("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindChannelByUUID(w, r, uuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDevices operation middleware
func (siw *ServerInterfaceWrapper) GetDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDevices(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDeviceByUUID operation middleware
func (siw *ServerInterfaceWrapper) GetDeviceByUUID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", r.PathValue("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDeviceByUUID(w, r, uuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchDevice operation middleware
func (siw *ServerInterfaceWrapper) PatchDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "uuid" -------------
	var uuid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "uuid", r.PathValue("uuid"), &uuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "uuid", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchDevice(w, r, uuid)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSessions operation middleware
func (siw *ServerInterfaceWrapper) GetSessions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSessions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/applets", wrapper.GetApplets)
	m.HandleFunc("GET "+options.BaseURL+"/applets/{id}", wrapper.GetAppletByID)
	m.HandleFunc("GET "+options.BaseURL+"/channels", wrapper.GetChannels)
	m.HandleFunc("POST "+options.BaseURL+"/channels", wrapper.CreateChannel)
	m.HandleFunc("POST "+options.BaseURL+"/channels/{channelUUID}/applets", wrapper.CreateChannelApplet)
	m.HandleFunc("DELETE "+options.BaseURL+"/channels/{channelUUID}/applets/{appletUUID}", wrapper.DeleteChannelApplet)
	m.HandleFunc("PATCH "+options.BaseURL+"/channels/{channelUUID}/applets/{appletUUID}", wrapper.PatchChannelApplet)
	m.HandleFunc("GET "+options.BaseURL+"/channels/{uuid}", wrapper.FindChannelByUUID)
	m.HandleFunc("GET "+options.BaseURL+"/devices", wrapper.GetDevices)
	m.HandleFunc("GET "+options.BaseURL+"/devices/{uuid}", wrapper.GetDeviceByUUID)
	m.HandleFunc("PATCH "+options.BaseURL+"/devices/{uuid}", wrapper.PatchDevice)
	m.HandleFunc("GET "+options.BaseURL+"/sessions", wrapper.GetSessions)

	return m
}

type DefaultErrorResponseJSONResponse Error

type GetAppletsRequestObject struct {
	Params GetAppletsParams
}

type GetAppletsResponseObject interface {
	VisitGetAppletsResponse(w http.ResponseWriter) error
}

type GetApplets200JSONResponse []App

func (response GetApplets200JSONResponse) VisitGetAppletsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAppletsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAppletsdefaultJSONResponse) VisitGetAppletsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAppletByIDRequestObject struct {
	Id string `json:"id"`
}

type GetAppletByIDResponseObject interface {
	VisitGetAppletByIDResponse(w http.ResponseWriter) error
}

type GetAppletByID200JSONResponse App

func (response GetAppletByID200JSONResponse) VisitGetAppletByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAppletByID404JSONResponse Error

func (response GetAppletByID404JSONResponse) VisitGetAppletByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAppletByIDdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAppletByIDdefaultJSONResponse) VisitGetAppletByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetChannelsRequestObject struct {
}

type GetChannelsResponseObject interface {
	VisitGetChannelsResponse(w http.ResponseWriter) error
}

type GetChannels200JSONResponse []ChannelSummary

func (response GetChannels200JSONResponse) VisitGetChannelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetChannelsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetChannelsdefaultJSONResponse) VisitGetChannelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateChannelRequestObject struct {
	Body *CreateChannelJSONRequestBody
}

type CreateChannelResponseObject interface {
	VisitCreateChannelResponse(w http.ResponseWriter) error
}

type CreateChannel201JSONResponse ChannelDetail

func (response CreateChannel201JSONResponse) VisitCreateChannelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChanneldefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateChanneldefaultJSONResponse) VisitCreateChannelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateChannelAppletRequestObject struct {
	ChannelUUID openapi_types.UUID `json:"channelUUID"`
	Body        *CreateChannelAppletJSONRequestBody
}

type CreateChannelAppletResponseObject interface {
	VisitCreateChannelAppletResponse(w http.ResponseWriter) error
}

type CreateChannelApplet201JSONResponse AppInstanceDetail

func (response CreateChannelApplet201JSONResponse) VisitCreateChannelAppletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateChannelApplet400JSONResponse Error

func (response CreateChannelApplet400JSONResponse) VisitCreateChannelAppletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateChannelApplet404JSONResponse Error

func (response CreateChannelApplet404JSONResponse) VisitCreateChannelAppletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateChannelAppletdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateChannelAppletdefaultJSONResponse) VisitCreateChannelAppletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteChannelAppletRequestObject struct {
	ChannelUUID openapi_types.UUID `json:"channelUUID"`
	AppletUUID  openapi_types.UUID `json:"appletUUID"`
}

type DeleteChannelAppletResponseObject interface {
	VisitDeleteChannelAppletResponse(w http.ResponseWriter) error
}

type DeleteChannelApplet200Response struct {
}

func (response DeleteChannelApplet200Response) VisitDeleteChannelAppletResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteChannelAppletdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteChannelAppletdefaultJSONResponse) VisitDeleteChannelAppletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PatchChannelAppletRequestObject struct {
	ChannelUUID openapi_types.UUID `json:"channelUUID"`
	AppletUUID  openapi_types.UUID `json:"appletUUID"`
	Body        *PatchChannelAppletJSONRequestBody
}

type PatchChannelAppletResponseObject interface {
	VisitPatchChannelAppletResponse(w http.ResponseWriter) error
}

type PatchChannelApplet200Response struct {
}

func (response PatchChannelApplet200Response) VisitPatchChannelAppletResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchChannelAppletdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PatchChannelAppletdefaultJSONResponse) VisitPatchChannelAppletResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type FindChannelByUUIDRequestObject struct {
	UUID openapi_types.UUID `json:"uuid"`
}

type FindChannelByUUIDResponseObject interface {
	VisitFindChannelByUUIDResponse(w http.ResponseWriter) error
}

type FindChannelByUUID200JSONResponse ChannelDetail

func (response FindChannelByUUID200JSONResponse) VisitFindChannelByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindChannelByUUIDdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response FindChannelByUUIDdefaultJSONResponse) VisitFindChannelByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDevicesRequestObject struct {
}

type GetDevicesResponseObject interface {
	VisitGetDevicesResponse(w http.ResponseWriter) error
}

type GetDevices200JSONResponse []DeviceSummary

func (response GetDevices200JSONResponse) VisitGetDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDevicesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDevicesdefaultJSONResponse) VisitGetDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetDeviceByUUIDRequestObject struct {
	UUID openapi_types.UUID `json:"uuid"`
}

type GetDeviceByUUIDResponseObject interface {
	VisitGetDeviceByUUIDResponse(w http.ResponseWriter) error
}

type GetDeviceByUUID200JSONResponse DeviceSummary

func (response GetDeviceByUUID200JSONResponse) VisitGetDeviceByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeviceByUUIDdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetDeviceByUUIDdefaultJSONResponse) VisitGetDeviceByUUIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PatchDeviceRequestObject struct {
	UUID openapi_types.UUID `json:"uuid"`
	Body *PatchDeviceJSONRequestBody
}

type PatchDeviceResponseObject interface {
	VisitPatchDeviceResponse(w http.ResponseWriter) error
}

type PatchDevice200Response struct {
}

func (response PatchDevice200Response) VisitPatchDeviceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PatchDevicedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PatchDevicedefaultJSONResponse) VisitPatchDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSessionsRequestObject struct {
}

type GetSessionsResponseObject interface {
	VisitGetSessionsResponse(w http.ResponseWriter) error
}

type GetSessions200JSONResponse []SessionSummary

func (response GetSessions200JSONResponse) VisitGetSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSessionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSessionsdefaultJSONResponse) VisitGetSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List available apps
	// (GET /applets)
	GetApplets(ctx context.Context, request GetAppletsRequestObject) (GetAppletsResponseObject, error)
	// Get the details of an app
	// (GET /applets/{id})
	GetAppletByID(ctx context.Context, request GetAppletByIDRequestObject) (GetAppletByIDResponseObject, error)

	// (GET /channels)
	GetChannels(ctx context.Context, request GetChannelsRequestObject) (GetChannelsResponseObject, error)

	// (POST /channels)
	CreateChannel(ctx context.Context, request CreateChannelRequestObject) (CreateChannelResponseObject, error)

	// (POST /channels/{channelUUID}/applets)
	CreateChannelApplet(ctx context.Context, request CreateChannelAppletRequestObject) (CreateChannelAppletResponseObject, error)

	// (DELETE /channels/{channelUUID}/applets/{appletUUID})
	DeleteChannelApplet(ctx context.Context, request DeleteChannelAppletRequestObject) (DeleteChannelAppletResponseObject, error)

	// (PATCH /channels/{channelUUID}/applets/{appletUUID})
	PatchChannelApplet(ctx context.Context, request PatchChannelAppletRequestObject) (PatchChannelAppletResponseObject, error)

	// (GET /channels/{uuid})
	FindChannelByUUID(ctx context.Context, request FindChannelByUUIDRequestObject) (FindChannelByUUIDResponseObject, error)
	// Get configured devices
	// (GET /devices)
	GetDevices(ctx context.Context, request GetDevicesRequestObject) (GetDevicesResponseObject, error)

	// (GET /devices/{uuid})
	GetDeviceByUUID(ctx context.Context, request GetDeviceByUUIDRequestObject) (GetDeviceByUUIDResponseObject, error)

	// (PATCH /devices/{uuid})
	PatchDevice(ctx context.Context, request PatchDeviceRequestObject) (PatchDeviceResponseObject, error)
	// Get connected sessions
	// (GET /sessions)
	GetSessions(ctx context.Context, request GetSessionsRequestObject) (GetSessionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApplets operation middleware
func (sh *strictHandler) GetApplets(w http.ResponseWriter, r *http.Request, params GetAppletsParams) {
	var request GetAppletsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApplets(ctx, request.(GetAppletsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApplets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAppletsResponseObject); ok {
		if err := validResponse.VisitGetAppletsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAppletByID operation middleware
func (sh *strictHandler) GetAppletByID(w http.ResponseWriter, r *http.Request, id string) {
	var request GetAppletByIDRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAppletByID(ctx, request.(GetAppletByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAppletByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAppletByIDResponseObject); ok {
		if err := validResponse.VisitGetAppletByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetChannels operation middleware
func (sh *strictHandler) GetChannels(w http.ResponseWriter, r *http.Request) {
	var request GetChannelsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetChannels(ctx, request.(GetChannelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetChannels")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetChannelsResponseObject); ok {
		if err := validResponse.VisitGetChannelsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChannel operation middleware
func (sh *strictHandler) CreateChannel(w http.ResponseWriter, r *http.Request) {
	var request CreateChannelRequestObject

	var body CreateChannelJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChannel(ctx, request.(CreateChannelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChannel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateChannelResponseObject); ok {
		if err := validResponse.VisitCreateChannelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateChannelApplet operation middleware
func (sh *strictHandler) CreateChannelApplet(w http.ResponseWriter, r *http.Request, channelUUID openapi_types.UUID) {
	var request CreateChannelAppletRequestObject

	request.ChannelUUID = channelUUID

	var body CreateChannelAppletJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateChannelApplet(ctx, request.(CreateChannelAppletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateChannelApplet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateChannelAppletResponseObject); ok {
		if err := validResponse.VisitCreateChannelAppletResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteChannelApplet operation middleware
func (sh *strictHandler) DeleteChannelApplet(w http.ResponseWriter, r *http.Request, channelUUID openapi_types.UUID, appletUUID openapi_types.UUID) {
	var request DeleteChannelAppletRequestObject

	request.ChannelUUID = channelUUID
	request.AppletUUID = appletUUID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteChannelApplet(ctx, request.(DeleteChannelAppletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteChannelApplet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteChannelAppletResponseObject); ok {
		if err := validResponse.VisitDeleteChannelAppletResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchChannelApplet operation middleware
func (sh *strictHandler) PatchChannelApplet(w http.ResponseWriter, r *http.Request, channelUUID openapi_types.UUID, appletUUID openapi_types.UUID) {
	var request PatchChannelAppletRequestObject

	request.ChannelUUID = channelUUID
	request.AppletUUID = appletUUID

	var body PatchChannelAppletJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchChannelApplet(ctx, request.(PatchChannelAppletRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchChannelApplet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchChannelAppletResponseObject); ok {
		if err := validResponse.VisitPatchChannelAppletResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FindChannelByUUID operation middleware
func (sh *strictHandler) FindChannelByUUID(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID) {
	var request FindChannelByUUIDRequestObject

	request.UUID = uuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FindChannelByUUID(ctx, request.(FindChannelByUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindChannelByUUID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FindChannelByUUIDResponseObject); ok {
		if err := validResponse.VisitFindChannelByUUIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDevices operation middleware
func (sh *strictHandler) GetDevices(w http.ResponseWriter, r *http.Request) {
	var request GetDevicesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDevices(ctx, request.(GetDevicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDevices")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDevicesResponseObject); ok {
		if err := validResponse.VisitGetDevicesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDeviceByUUID operation middleware
func (sh *strictHandler) GetDeviceByUUID(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID) {
	var request GetDeviceByUUIDRequestObject

	request.UUID = uuid

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeviceByUUID(ctx, request.(GetDeviceByUUIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeviceByUUID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDeviceByUUIDResponseObject); ok {
		if err := validResponse.VisitGetDeviceByUUIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchDevice operation middleware
func (sh *strictHandler) PatchDevice(w http.ResponseWriter, r *http.Request, uuid openapi_types.UUID) {
	var request PatchDeviceRequestObject

	request.UUID = uuid

	var body PatchDeviceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchDevice(ctx, request.(PatchDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchDeviceResponseObject); ok {
		if err := validResponse.VisitPatchDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSessions operation middleware
func (sh *strictHandler) GetSessions(w http.ResponseWriter, r *http.Request) {
	var request GetSessionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSessions(ctx, request.(GetSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSessions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSessionsResponseObject); ok {
		if err := validResponse.VisitGetSessionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
